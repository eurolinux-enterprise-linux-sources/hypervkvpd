#!/bin/bash
#
# hv_kvp_daemon Implementation of KVP daemon for Linux
#
# chkconfig:   345 20 80
# description: Implementation of KVP daemon for Linux.
#

### BEGIN INIT INFO
# Provides:          hv_kvp_daemon
# Required-Start:    $null
# Should-Start:      $syslog $remote_fs $time
# Required-Stop:     $null
# Should-Stop:       $syslog $remote_fs $time
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Short-Description: hv_kvp_daemon provides info to the host
# Description:       Start hv_kvp_daemon to allow the host to query this guest
### END INIT INFO

. /etc/rc.d/init.d/functions

RETVAL=0
HV_KVP_BIN="/usr/sbin/hv_kvp_daemon"
lockfile=/var/lock/subsys/hypervkvpd

# Check for missing binaries
test -x $HV_KVP_BIN || { echo "$HV_KVP_BIN not installed";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

start(){
	if ! status $HV_KVP_BIN >&/dev/null; then
		echo -n "Starting Hyper-V KVP daemon "
		daemon $HV_KVP_BIN
		RETVAL=$?
		echo
		[ $RETVAL -eq 0 ] && touch $lockfile
	else
		echo -n "Hyper-V KVP daemon is already started"
	fi
	echo
}

stop(){
	echo -n "Shutting down Hyper-V KVP daemon "
	killproc $HV_KVP_BIN
	RETVAL=$?
	echo
	[ $RETVAL -eq 0 ] && rm -f $lockfile
}

restart() {
	stop
	start
}

reload() {
	restart
}

force_reload() {
	restart
}

rh_status() {
	# run checks to determine if the service is running or use generic status
	status $HV_KVP_BIN
	RETVAL=$?
	return $RETVAL
}

rh_status_q() {
	rh_status >/dev/null 2>&1
}

case "$1" in
	start)
		rh_status_q && exit 0
		$1
		;;
	stop)
		rh_status_q || exit 0
		$1
		;;
	restart)
		$1
		;;
	reload)
		rh_status_q || exit 7
		$1
		;;
	force-reload)
		force_reload
		;;
	status)
		rh_status
		;;
	condrestart|try-restart)
		rh_status_q || exit 0
		restart
		;;
	*)
		echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
		exit 2
esac

exit $RETVAL
